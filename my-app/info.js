// ! Писать на реакте с TS
// todo создать папку frontend с dev окружением
// * npx create-react-app frontendts --template typescript
// todo наполнить текущую папку dev окружением
// * npx create-react-app . --template typescript
// ? тут уже tsx 
// * Можно удалить reportWebVitals.js, setupTests.js, App.test.tsx
// todo В react ts нельзя удалять:
// * react-app-env.d.ts

// * https://jsonplaceholder.typicode.com/

// ! Уже есть eslint
// * Уже есть .gitignore, package.json с зависимостями
// * в node_modules - babel
// * public: manifest.json - прописывается под какой размер экрана будет разная картинка логотипа 
// * <noscript>You need to enable JavaScript to run this app.</noscript> - появится, если в браузере отключим работу скриптов!

// ? WebPack - собирает все компоненты, компоненты, css и делает из него html
// * из src можно удалить: reportWebVitals, setupTests, App.test
// ? jsx - позволяет вставлять js в html разметку
// ! Если export - то можно в 1 файле несколько делать, в файле, где import - достаю через деструктуризацию
// ! Если export default - то только 1 ф-я в файле!
// ! Если куча ф-ий то - export. Если export default - то без деструктуризации import Compo3, { Compom Compo2 } from './..'

// ? Виртуальный DOM: когда в коде реакта меняется часть - компоненты прогружаются сверху вниз и он сравнивает каждый компонент
// ? и каждый элемент и меняет точечно. Ему не нужно перерисовывать всё DOM дерево, меньше затрат на производительность
// ? Не всё заново, запуск всех скриптов и новый html, а аккуратное изменение конкретного элемента
// ! Чтобы что-то поменялось визульно, это должно поменяться в стейте (состоянии)

// ? Хуки - ф-ии, который написаны за нас и выполняют действия, наша задача понять их и начать применять
// * useState - хук (функция), которых хранит в себе состояния (данные) компонента, некая память компонента

// ! Правила хуков:
// todo 1 Любой хук должен начинаться use...
// todo 2 Вызывать хуки только из React-функций (компоненты) 
// todo 3 Любой хук должен вызываться на верхнем уровне (не в циклах, не в условиях)

// ! Коллбэк - ф-и отложенного действия, если писать setState(state + 1) - будет добавлять только по 1, хоть сколько раз её вызывай
// ! А если setState((prev) => prev + 1) - то через колбэк будет откладываться и уже использоваться предыдущий результат
// ! Если нужно использовать предыдущее значение и как-то его менять, то нужно в useState использовать коллбэк

// todo TypeScript
// * TypeScript — это язык программирования, в котором
// * исправлены многие недостатки JavaScript.
// * TS компилируется в JS и подходит для разработки любых
// * проектов под любые браузеры — тем более что можно
// * выбрать версию JS, в которую будет компилироваться код.

// todo JS - динамически типизированный язык, слабая неявная типизация
// todo TS - ПЫТАЕТСЯ сделать его статически типизированным
// todo у TS - самая мощная система типов из всех языков
